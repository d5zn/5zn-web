class TrinkyApp{constructor(){this.stravaToken=localStorage.getItem('strava_token');this.currentWorkout=null;this.workouts=[];this.canvas=null;this.ctx=null;this.currentTab='photo';this.currentMetric='distance';this.activeMetrics=new Set(['distance']);this.backgroundImage=null;this.originalBackgroundImage=null;this.isMonochrome=false;this.logoImage=null;this.imageTransform={x: 0,y: 0,scale: 1,rotation: 0};this.touchState={isDragging: false,isScaling: false,lastTouchDistance: 0,lastTouchCenter:{x: 0,y: 0},startTouches: []};this.init();}init(){console.log('TrinkyApp initializing...');this.setupEventListeners();this.setupCanvas();this.setupTabs();this.initializeRatio();this.setupMobileOptimizations();this.checkAuthStatus();setTimeout(()=>{this.forceMobileDisplay();},100);}setupEventListeners(){document.getElementById('connect-strava-btn')?.addEventListener('click',()=> this.connectStrava());document.getElementById('connect-strava-btn')?.addEventListener('touchend',(e)=>{e.preventDefault();this.connectStrava();});document.getElementById('upload-photo-btn')?.addEventListener('click',()=>{document.getElementById('photo-input').click();});document.getElementById('upload-logo-btn')?.addEventListener('click',()=>{document.getElementById('logo-input').click();});document.getElementById('photo-input')?.addEventListener('change',(e)=>{this.handlePhotoUpload(e.target.files[0]);});document.getElementById('logo-input')?.addEventListener('change',(e)=>{this.handleLogoUpload(e.target.files[0]);});document.getElementById('workout-selector-btn')?.addEventListener('click',()=>{this.openWorkoutSelector();});document.getElementById('share-btn')?.addEventListener('click',()=>{this.shareData();});document.getElementById('close-workout-selector')?.addEventListener('click',()=>{this.closeWorkoutSelector();});document.getElementById('workout-selector-modal')?.addEventListener('click',(e)=>{if(e.target.classList.contains('modal-backdrop')){this.closeWorkoutSelector();}});}setupTabs(){document.querySelectorAll('.tab-btn').forEach(btn=>{btn.addEventListener('click',(e)=>{const tabName=e.target.dataset.tab;this.switchTab(tabName);});});document.querySelectorAll('.data-btn').forEach(btn=>{btn.addEventListener('click',(e)=>{const metric=e.target.dataset.metric;this.selectMetric(metric);});});document.querySelectorAll('.position-btn').forEach(btn=>{btn.addEventListener('click',(e)=>{const position=e.target.dataset.position;this.setPosition(position);});});document.querySelectorAll('.color-btn').forEach(btn=>{btn.addEventListener('click',(e)=>{const color=e.target.dataset.color;this.setColor(color);});});document.querySelectorAll('.ratio-btn').forEach(btn=>{btn.addEventListener('click',(e)=>{const ratio=e.target.dataset.ratio;this.setRatio(ratio);});});}initializeRatio(){this.setRatio('9:16');}setupMobileOptimizations(){this.forceMobileDisplay();window.addEventListener('orientationchange',()=>{setTimeout(()=>{this.resizeCanvas();this.forceMobileDisplay();},100);});window.addEventListener('resize',()=>{this.resizeCanvas();this.forceMobileDisplay();});let lastTouchEnd=0;document.addEventListener('touchend',(e)=>{const now=(new Date()).getTime();if(now - lastTouchEnd <=300){e.preventDefault();}lastTouchEnd=now;},false);document.addEventListener('contextmenu',(e)=>{e.preventDefault();});}forceMobileDisplay(){const container=document.getElementById('mobile-container');const previewArea=document.querySelector('.preview-area');const connectedState=document.getElementById('connected');if(container && previewArea){container.style.setProperty('width','100vw','important');container.style.setProperty('height','100vh','important');container.style.setProperty('display','flex','important');container.style.setProperty('flex-direction','column','important');container.style.setProperty('margin','0','important');container.style.setProperty('padding','0','important');container.style.setProperty('overflow','hidden','important');previewArea.style.setProperty('flex','1','important');previewArea.style.setProperty('display','flex','important');previewArea.style.setProperty('align-items','center','important');previewArea.style.setProperty('justify-content','center','important');if(connectedState){connectedState.style.setProperty('width','100%','important');connectedState.style.setProperty('height','100%','important');}console.log('üîß –ü—Ä–æ—Å—Ç–∞—è flex —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞');}}setupCanvas(){this.canvas=document.getElementById('route-canvas');if(this.canvas){this.ctx=this.canvas.getContext('2d');this.resizeCanvas();window.addEventListener('resize',()=> this.resizeCanvas());this.setupImageManipulation();this.setupPhotoButtons();this.initializeActiveMetrics();}}resizeCanvas(){if(!this.canvas)return;const connectedState=document.getElementById('connected');const is4_5=connectedState && connectedState.classList.contains('ratio-4-5');const dpr=window.devicePixelRatio || 1;let canvasWidth,canvasHeight;const previewArea=document.querySelector('.preview-area');const previewRect=previewArea.getBoundingClientRect();canvasWidth=previewRect.width;canvasHeight=previewRect.height;if(is4_5){console.log('üìê 4:5 Canvas - using preview area:',canvasWidth,'x',canvasHeight);}else{console.log('üìê 9:16 Canvas - using preview area:',canvasWidth,'x',canvasHeight);}this.canvas.style.width=canvasWidth + 'px';this.canvas.style.height=canvasHeight + 'px';this.canvas.width=canvasWidth * dpr;this.canvas.height=canvasHeight * dpr;this.ctx.scale(dpr,dpr);console.log('üìê Canvas resized:',canvasWidth,'x',canvasHeight,'DPR:',dpr,'Actual canvas size:',this.canvas.width,'x',this.canvas.height);if(this.currentWorkout){this.drawRoute();}}checkAuthStatus(){console.log('Checking auth status,token:',this.stravaToken);if(this.stravaToken && this.stravaToken !=='null'){console.log('Token found,loading workouts...');this.loadWorkouts();}else{console.log('No token,showing not connected state');this.showNotConnectedState();}}async connectStrava(){const clientId=window.CONFIG?.STRAVA?.CLIENT_ID || 'YOUR_STRAVA_CLIENT_ID';const redirectUri=window.CONFIG?.STRAVA?.REDIRECT_URI || `${window.location.origin}/oauth/`;const scope=window.CONFIG?.STRAVA?.SCOPE || 'read,activity:read_all';const isLocalhost=window.location.hostname==='localhost' || window.location.hostname==='127.0.0.1';if(isLocalhost && clientId==='YOUR_STRAVA_CLIENT_ID'){this.showDevInstructions();return;}const authUrl=`https: window.location.href=authUrl;}showDevInstructions(){const instructions=` <div style="position: fixed;top: 0;left: 0;right: 0;bottom: 0;background: rgba(0,0,0,0.95);z-index: 10000;display: flex;align-items: center;justify-content: center;padding: 2rem;"> <div style="background: #000000;border: 1px solid #333333;padding: 2rem;border-radius: 8px;max-width: 500px;color: white;"> <h2 style="color: #ffffff;margin-bottom: 1rem;font-weight: 300;">Development Mode</h2> <p style="margin-bottom: 1rem;opacity: 0.8;">–î–ª—è —Ä–∞–±–æ—Ç—ã —Å Strava OAuth –≤ –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ:</p> <ol style="margin: 1rem 0;padding-left: 1.5rem;opacity: 0.8;"> <li>–°–æ–∑–¥–∞–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ <a href="https: <li>–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Authorization Callback Domain: <code style="background: #111111;padding: 0.2rem 0.4rem;border-radius: 2px;">localhost:8000</code></li> <li>–ó–∞–º–µ–Ω–∏—Ç–µ YOUR_STRAVA_CLIENT_ID –≤ config.js –Ω–∞ –≤–∞—à Client ID</li> <li>–ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ ngrok –¥–ª—è –ø—É–±–ª–∏—á–Ω–æ–≥–æ URL</li> </ol> <p style="margin: 1rem 0;opacity: 0.8;"><strong>–ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–∞:</strong> –ù–∞–∂–º–∏—Ç–µ F12,–æ—Ç–∫—Ä–æ–π—Ç–µ Console –∏ –≤—ã–ø–æ–ª–Ω–∏—Ç–µ:</p> <code style="background: #111111;padding: 0.5rem;border-radius: 4px;display: block;margin: 0.5rem 0;font-family: monospace;font-size: 0.9rem;"> localStorage.setItem('strava_token','mock_token');location.reload();</code> <button onclick="this.parentElement.parentElement.remove()" style="background: #ffffff;color: #000000;border: none;padding: 0.5rem 1rem;border-radius: 4px;margin-top: 1rem;cursor: pointer;font-weight: 300;"> –ü–æ–Ω—è—Ç–Ω–æ </button> </div> </div> `;document.body.insertAdjacentHTML('beforeend',instructions);}async loadWorkouts(){try{console.log('üîÑ Loading workouts...');const response=await this.fetchStravaData('/athlete/activities?per_page=10');console.log('üìä Workouts response:',response);this.workouts=response.data || [];console.log('üìã Workouts loaded:',this.workouts.length);if(this.workouts.length > 0){this.currentWorkout=this.workouts[0];console.log('üéØ Current workout:',this.currentWorkout);this.updateWorkoutDisplay();this.drawRoute();}else{console.log('‚ö†Ô∏è No workouts found');}this.showConnectedState();}catch(error){console.error('‚ùå Error loading workouts:',error);this.showError('Failed to load workouts. Please try again.');}}async fetchStravaData(endpoint){try{const apiUrl=`https: const response=await fetch(apiUrl,{headers:{'Authorization': `Bearer ${this.stravaToken}`,'Content-Type': 'application/json'}});if(!response.ok){throw new Error(`Strava API error: ${response.status}${response.statusText}`);}const data=await response.json();return{data};}catch(error){console.error('‚ùå Strava API error:',error);return new Promise((resolve)=>{setTimeout(()=>{resolve({data: [{id: 1,name: 'Morning Ride',distance: 15000,moving_time: 3600,total_elevation_gain: 500,average_speed: 4.17,map:{polyline: 'mock_polyline_data'}},{id: 2,name: 'Evening Run',distance: 8000,moving_time: 2400,total_elevation_gain: 200,average_speed: 3.33,map:{polyline: 'mock_polyline_data_2'}}]});},1000);});}}updateWorkoutDisplay(){if(!this.currentWorkout)return;if(this.activeMetrics.has('distance')){const distance=this.formatDistance(this.currentWorkout.distance);document.getElementById('distance-value').textContent=distance;}else{document.getElementById('distance-value').textContent='';}if(this.activeMetrics.has('elevation')){const elevation=this.formatElevation(this.currentWorkout.total_elevation_gain);document.getElementById('elevation-value').textContent=elevation;}else{document.getElementById('elevation-value').textContent='';}if(this.activeMetrics.has('speed')){const speed=this.formatSpeed(this.currentWorkout.average_speed);document.getElementById('speed-value').textContent=speed;}else{document.getElementById('speed-value').textContent='';}if(this.activeMetrics.has('time')){const time=this.formatTime(this.currentWorkout.moving_time);document.getElementById('time-value').textContent=time;}else{document.getElementById('time-value').textContent='';}this.drawRoute();}formatDistance(meters){if(meters >=1000){return `${(meters / 1000).toFixed(1)}km`;}return `${meters}m`;}formatElevation(meters){return `${meters}m`;}formatSpeed(mps){const kmh=mps * 3.6;return `${kmh.toFixed(1)}km/h`;}drawRoute(){if(!this.ctx || !this.currentWorkout)return;this.ctx.clearRect(0,0,this.canvas.width,this.canvas.height);if(this.backgroundImage){this.drawBackgroundSync();}this.drawDemoRoute();this.drawStravaData();}drawBackgroundSync(){if(this.backgroundImage){const img=new Image();img.src=this.backgroundImage;if(img.complete){this.drawBackgroundImage(img);}else{img.onload=()=>{this.drawBackgroundImage(img);this.drawDemoRoute();this.drawStravaData();};}}}drawBackgroundImage(img){const canvasWidth=this.canvas.width /(window.devicePixelRatio || 1);const canvasHeight=this.canvas.height /(window.devicePixelRatio || 1);const imgAspect=img.width / img.height;const canvasAspect=canvasWidth / canvasHeight;let drawWidth,drawHeight,drawX,drawY;if(imgAspect > canvasAspect){drawHeight=canvasHeight;drawWidth=drawHeight * imgAspect;drawX=(canvasWidth - drawWidth)/ 2;drawY=0;}else{drawWidth=canvasWidth;drawHeight=drawWidth / imgAspect;drawX=0;drawY=(canvasHeight - drawHeight)/ 2;}this.ctx.save();const centerX=drawX + drawWidth / 2;const centerY=drawY + drawHeight / 2;this.ctx.translate(centerX + this.imageTransform.x,centerY + this.imageTransform.y);this.ctx.scale(this.imageTransform.scale,this.imageTransform.scale);this.ctx.rotate(this.imageTransform.rotation);this.ctx.drawImage(img,-drawWidth / 2,-drawHeight / 2,drawWidth,drawHeight);this.ctx.restore();this.drawOrangeOverlay();console.log('üñºÔ∏è Background image drawn to canvas(height-adaptive)');}drawOrangeOverlay(){const canvasWidth=this.canvas.width /(window.devicePixelRatio || 1);const canvasHeight=this.canvas.height /(window.devicePixelRatio || 1);this.ctx.fillStyle='rgba(0,0,0,0.4)';this.ctx.fillRect(0,0,canvasWidth,canvasHeight);console.log('‚ö´ Black overlay drawn for contrast');}setupImageManipulation(){this.canvas.addEventListener('mousedown',(e)=> this.handleMouseDown(e));this.canvas.addEventListener('mousemove',(e)=> this.handleMouseMove(e));this.canvas.addEventListener('mouseup',(e)=> this.handleMouseUp(e));this.canvas.addEventListener('wheel',(e)=> this.handleWheel(e));this.canvas.addEventListener('touchstart',(e)=> this.handleTouchStart(e),{passive: false});this.canvas.addEventListener('touchmove',(e)=> this.handleTouchMove(e),{passive: false});this.canvas.addEventListener('touchend',(e)=> this.handleTouchEnd(e),{passive: false});}handleMouseDown(e){if(!this.backgroundImage)return;this.touchState.isDragging=true;this.touchState.lastTouchCenter={x: e.clientX,y: e.clientY};e.preventDefault();}handleMouseMove(e){if(!this.touchState.isDragging || !this.backgroundImage)return;const deltaX=e.clientX - this.touchState.lastTouchCenter.x;const deltaY=e.clientY - this.touchState.lastTouchCenter.y;this.imageTransform.x +=deltaX;this.imageTransform.y +=deltaY;this.touchState.lastTouchCenter={x: e.clientX,y: e.clientY};this.drawRoute();e.preventDefault();}handleMouseUp(e){this.touchState.isDragging=false;e.preventDefault();}handleWheel(e){if(!this.backgroundImage)return;const scaleFactor=e.deltaY > 0 ? 0.9 : 1.1;this.imageTransform.scale *=scaleFactor;this.imageTransform.scale=Math.max(0.1,Math.min(5,this.imageTransform.scale));this.drawRoute();e.preventDefault();}handleTouchStart(e){if(!this.backgroundImage)return;this.touchState.startTouches=Array.from(e.touches);if(e.touches.length===1){this.touchState.isDragging=true;this.touchState.lastTouchCenter={x: e.touches[0].clientX,y: e.touches[0].clientY};}else if(e.touches.length===2){this.touchState.isScaling=true;this.touchState.isDragging=false;this.touchState.lastTouchDistance=this.getTouchDistance(e.touches);this.touchState.lastTouchCenter=this.getTouchCenter(e.touches);}e.preventDefault();}handleTouchMove(e){if(!this.backgroundImage)return;if(this.touchState.isDragging && e.touches.length===1){const deltaX=e.touches[0].clientX - this.touchState.lastTouchCenter.x;const deltaY=e.touches[0].clientY - this.touchState.lastTouchCenter.y;this.imageTransform.x +=deltaX;this.imageTransform.y +=deltaY;this.touchState.lastTouchCenter={x: e.touches[0].clientX,y: e.touches[0].clientY};this.drawRoute();}else if(this.touchState.isScaling && e.touches.length===2){const currentDistance=this.getTouchDistance(e.touches);const scaleFactor=currentDistance / this.touchState.lastTouchDistance;this.imageTransform.scale *=scaleFactor;this.imageTransform.scale=Math.max(0.1,Math.min(5,this.imageTransform.scale));this.touchState.lastTouchDistance=currentDistance;this.touchState.lastTouchCenter=this.getTouchCenter(e.touches);this.drawRoute();}e.preventDefault();}handleTouchEnd(e){this.touchState.isDragging=false;this.touchState.isScaling=false;e.preventDefault();}getTouchDistance(touches){if(touches.length < 2)return 0;const dx=touches[0].clientX - touches[1].clientX;const dy=touches[0].clientY - touches[1].clientY;return Math.sqrt(dx * dx + dy * dy);}getTouchCenter(touches){if(touches.length===0)return{x: 0,y: 0};let x=0,y=0;for(let touch of touches){x +=touch.clientX;y +=touch.clientY;}return{x: x / touches.length,y: y / touches.length};}setupPhotoButtons(){document.getElementById('mono-toggle-btn')?.addEventListener('click',()=>{if(this.isMonochrome){this.returnToOriginal();}else{this.convertToMono();}});}convertToMono(){if(!this.backgroundImage){console.log('‚ö†Ô∏è No background image to convert');return;}const tempCanvas=document.createElement('canvas');const tempCtx=tempCanvas.getContext('2d');const img=new Image();img.onload=()=>{tempCanvas.width=img.width;tempCanvas.height=img.height;tempCtx.drawImage(img,0,0);const imageData=tempCtx.getImageData(0,0,tempCanvas.width,tempCanvas.height);const data=imageData.data;for(let i=0;i < data.length;i +=4){const r=data[i];const g=data[i + 1];const b=data[i + 2];let gray=Math.round(0.299 * r + 0.587 * g + 0.114 * b);gray=gray / 255;if(gray < 0.5){gray=Math.pow(gray * 2,1.5)/ 2;}else{gray=0.5 + Math.pow((gray - 0.5)* 2,0.6)/ 2;}gray=Math.pow(gray,0.8);gray=gray * gray *(3 - 2 * gray);gray=Math.round(gray * 255);gray=Math.max(0,Math.min(255,gray));data[i]=gray;data[i + 1]=gray;data[i + 2]=gray;}tempCtx.putImageData(imageData,0,0);this.backgroundImage=tempCanvas.toDataURL('image/png');this.isMonochrome=true;this.updateMonoButton();this.drawRoute();console.log('üñ§ Image converted to monochrome');};img.src=this.backgroundImage;}returnToOriginal(){if(!this.originalBackgroundImage){console.log('‚ö†Ô∏è No original image to return to');return;}this.backgroundImage=this.originalBackgroundImage;this.isMonochrome=false;this.updateMonoButton();this.drawRoute();console.log('üîÑ Returned to original image');}initializeActiveMetrics(){document.querySelectorAll('.data-btn').forEach(btn=>{btn.classList.remove('active');});document.querySelector(`[data-metric="distance"]`).classList.add('active');}updateMonoButton(){const monoBtn=document.getElementById('mono-toggle-btn');if(!monoBtn)return;if(this.isMonochrome){monoBtn.textContent='Return to Original';}else{monoBtn.textContent='Convert to Mono';}}drawBackground(){if(this.backgroundImage){const img=new Image();img.onload=()=>{this.drawBackgroundImage(img);this.drawDemoRoute();this.drawStravaData();};img.src=this.backgroundImage;}}drawStravaData(){if(!this.currentWorkout)return;const canvasWidth=this.canvas.width;const canvasHeight=this.canvas.height;const connectedState=document.getElementById('connected');const is4_5=connectedState && connectedState.classList.contains('ratio-4-5');this.drawStravaDataCard();}drawStravaDataCard(){const canvasWidth=this.canvas.width /(window.devicePixelRatio || 1);const canvasHeight=this.canvas.height /(window.devicePixelRatio || 1);const connectedState=document.getElementById('connected');const is4_5=connectedState && connectedState.classList.contains('ratio-4-5');let topPadding,bottomPadding;if(is4_5){topPadding=canvasHeight * 0.08;bottomPadding=canvasHeight * 0.08;}else{topPadding=canvasHeight * 0.07;bottomPadding=canvasHeight * 0.04;}this.ctx.fillStyle='#FFFFFF';this.ctx.font='600 22px Inter,sans-serif';this.ctx.textAlign='left';this.ctx.fillText('Morning Ride',20,topPadding + 50);this.ctx.font='13px Inter,sans-serif';this.ctx.fillStyle='#FFFFFF';this.ctx.fillText('25 OCT,15:30',20,topPadding + 80);if(is4_5){const logoX=(canvasWidth - 72)/ 2;const logoY=canvasHeight - bottomPadding - 72 - 20;this.drawLogoContainer(logoX,logoY,72,72);}else{const logoX=canvasWidth - 72 - 20;const logoY=topPadding + 50 - 36;this.drawLogoContainer(logoX,logoY,72,72);}const availableHeight=canvasHeight - topPadding - bottomPadding;const statsHeight=availableHeight * 0.3;const statsY=canvasHeight - statsHeight + 20;const statsWidth=canvasWidth - 40;const colWidth=statsWidth / 3;const rowHeight=statsHeight / 2;const allStats=[{key: 'distance',label: 'DISTANCE',value: this.formatDistance(this.currentWorkout.distance)},{key: 'elevation',label: 'ELEVATION',value: this.formatElevation(this.currentWorkout.total_elevation_gain)},{key: 'time',label: 'TIME',value: this.formatTime(this.currentWorkout.moving_time)},{key: 'speed',label: 'SPEED/AVG',value: this.formatSpeed(this.currentWorkout.average_speed)},{key: 'calories',label: 'CALORIES',value: '1,200'},{key: 'power',label: 'POWER/AVG',value: '180W'}];const stats=allStats.filter(stat=> this.activeMetrics.has(stat.key));if(is4_5){this.drawMetrics4_5(stats,canvasWidth,canvasHeight,topPadding,bottomPadding);}else{for(let i=0;i < stats.length;i++){const col=i % 3;const row=Math.floor(i / 3);const y=statsY + row * 70;let x,textAlign;if(col===0){x=20;textAlign='left';}else if(col===1){x=20 + colWidth + colWidth / 2;textAlign='center';}else{x=canvasWidth - 20;textAlign='right';}this.ctx.fillStyle='#FFFFFF';this.ctx.font='13px Inter,sans-serif';this.ctx.textAlign=textAlign;this.ctx.fillText(stats[i].label,x,y + 20);this.ctx.fillStyle='#FFFFFF';this.ctx.font='600 22px Inter,sans-serif';this.ctx.fillText(stats[i].value,x,y + 50);}}console.log('üìä Strava data card drawn to canvas');}drawMetrics4_5(stats,canvasWidth,canvasHeight,topPadding,bottomPadding){const leftPadding=canvasWidth * 0.08;const rightPadding=canvasWidth * 0.08;const centerY=canvasHeight / 2;const positions=[{x: leftPadding + 20,y: topPadding + 60,textAlign: 'left'},{x: canvasWidth - rightPadding - 20,y: topPadding + 60,textAlign: 'right'},{x: leftPadding + 20,y: centerY,textAlign: 'left'},{x: canvasWidth - rightPadding - 20,y: centerY,textAlign: 'right'},{x: leftPadding + 20,y: canvasHeight - bottomPadding - 40,textAlign: 'left'},{x: canvasWidth - rightPadding - 20,y: canvasHeight - bottomPadding - 40,textAlign: 'right'}];for(let i=0;i < stats.length && i < positions.length;i++){const pos=positions[i];this.ctx.fillStyle='#FFFFFF';this.ctx.font='13px Inter,sans-serif';this.ctx.textAlign=pos.textAlign;this.ctx.fillText(stats[i].label,pos.x,pos.y);this.ctx.fillStyle='#FFFFFF';this.ctx.font='600 22px Inter,sans-serif';this.ctx.fillText(stats[i].value,pos.x,pos.y + 30);}console.log('üìä Metrics positioned for 4:5 ratio - showing',stats.length,'active metrics');}drawStravaDataOld(){const canvasWidth=this.canvas.width /(window.devicePixelRatio || 1);const canvasHeight=this.canvas.height /(window.devicePixelRatio || 1);this.ctx.fillStyle='#FFFFFF';this.ctx.font='600 22px Inter,sans-serif';this.ctx.textAlign='left';const distance=this.formatDistance(this.currentWorkout.distance);const elevation=this.formatElevation(this.currentWorkout.total_elevation_gain);this.ctx.fillText('DISTANCE',20,40);this.ctx.fillText(distance,20,70);this.ctx.textAlign='right';this.ctx.fillText('ELEVATION',canvasWidth - 20,40);this.ctx.fillText(elevation,canvasWidth - 20,70);const speed=this.formatSpeed(this.currentWorkout.average_speed);const time=this.formatTime(this.currentWorkout.moving_time);this.ctx.textAlign='left';this.ctx.fillText('AVG SPEED',20,canvasHeight - 50);this.ctx.fillText(speed,20,canvasHeight - 20);this.ctx.textAlign='right';this.ctx.fillText('TIME',canvasWidth - 20,canvasHeight - 50);this.ctx.fillText(time,canvasWidth - 20,canvasHeight - 20);console.log('üìä Strava data old layout drawn to canvas');}drawLogoContainer(x,y,width,height){this.drawSVGLogo(x,y,width,height);console.log('üñºÔ∏è Logo container drawn:',x,y,width,height);}drawSVGLogo(x,y,width,height){const img=new Image();img.onload=()=>{this.ctx.drawImage(img,x,y,width,height);console.log('üñºÔ∏è SVG logo loaded and drawn at:',x,y,width,height);};img.onerror=()=>{this.ctx.fillStyle='#FFFFFF';this.ctx.font='13px Inter,sans-serif';this.ctx.textAlign='center';this.ctx.fillText('LOGO',x + width/2,y + height/2 + 4);console.log('‚ö†Ô∏è SVG logo failed to load,showing placeholder at:',x,y);};img.src='logo_NIP.svg';console.log('üñºÔ∏è Attempting to load SVG logo from: logo_NIP.svg');}drawBikeIcon(x,y){this.ctx.strokeStyle='#FFFFFF';this.ctx.lineWidth=3;this.ctx.lineCap='round';this.ctx.beginPath();this.ctx.moveTo(x,y + 20);this.ctx.lineTo(x + 15,y + 10);this.ctx.lineTo(x + 25,y + 15);this.ctx.lineTo(x + 30,y + 5);this.ctx.stroke();this.ctx.beginPath();this.ctx.arc(x + 5,y + 20,8,0,Math.PI * 2);this.ctx.stroke();this.ctx.beginPath();this.ctx.arc(x + 25,y + 15,8,0,Math.PI * 2);this.ctx.stroke();}drawActivityGraph(x,y,width,height){this.ctx.lineWidth=4;this.ctx.lineCap='round';this.ctx.lineJoin='round';const points=[];const numPoints=20;for(let i=0;i <=numPoints;i++){const pointX=x +(i / numPoints)* width;const pointY=y + height -(Math.sin(i * 0.3)* 0.5 + 0.5)* height * 0.8;points.push({x: pointX,y: pointY});}const gradient=this.ctx.createLinearGradient(x,0,x + width,0);gradient.addColorStop(0,'#002395');gradient.addColorStop(0.5,'#FFFFFF');gradient.addColorStop(1,'#ED2939');this.ctx.strokeStyle=gradient;this.ctx.beginPath();this.ctx.moveTo(points[0].x,points[0].y);for(let i=1;i < points.length;i++){this.ctx.lineTo(points[i].x,points[i].y);}this.ctx.stroke();}drawDemoRoute(){const width=this.canvas.width /(window.devicePixelRatio || 1);const height=this.canvas.height /(window.devicePixelRatio || 1);const connectedState=document.getElementById('connected');const is4_5=connectedState && connectedState.classList.contains('ratio-4-5');if(!is4_5){const topPadding=height * 0.07;const bottomPadding=height * 0.04;const routeTopPadding=topPadding + 120;const availableHeight=height - topPadding - bottomPadding;const routeBottomPadding=availableHeight * 0.3;const routeHeight=height - routeTopPadding - routeBottomPadding;const points=this.generateDemoRoute(width,routeHeight,20,routeTopPadding);this.drawSingleRoute(points);}else{const topPadding=height * 0.08;const bottomPadding=height * 0.08;const leftPadding=width * 0.08;const rightPadding=width * 0.08;const routeWidth=width - leftPadding - rightPadding;const routeHeight=height - topPadding - bottomPadding;const routeTopPadding=topPadding;const points=this.generateDemoRoute(routeWidth,routeHeight,20,routeTopPadding);this.drawSingleRoute(points);}}drawSingleRoute(points){this.ctx.lineWidth=4;this.ctx.lineCap='round';this.ctx.lineJoin='round';let minX=Math.min(...points.map(p=> p.x));let maxX=Math.max(...points.map(p=> p.x));const gradient=this.ctx.createLinearGradient(minX,0,maxX,0);gradient.addColorStop(0,'#002395');gradient.addColorStop(0.4,'#FFFFFF');gradient.addColorStop(0.6,'#FFFFFF');gradient.addColorStop(1,'#ED2939');this.ctx.strokeStyle=gradient;this.ctx.beginPath();for(let i=0;i < points.length;i++){if(i===0){this.ctx.moveTo(points[i].x,points[i].y);}else{this.ctx.lineTo(points[i].x,points[i].y);}}this.ctx.stroke();}generateDemoRoute(width,height,padding,topPadding=0){const points=[];const numPoints=40;for(let i=0;i <=numPoints;i++){const t=i / numPoints;const x=padding +(width - 2 * padding)* t;const y=topPadding + padding +(height - 2 * padding)*(0.5 + 0.3 * Math.sin(t * Math.PI * 3)+ 0.2 * Math.sin(t * Math.PI * 7));if(!isNaN(x)&& !isNaN(y)&& isFinite(x)&& isFinite(y)){points.push({x: Math.round(x),y: Math.round(y)});}}console.log('Generated',points.length,'valid points');return points;}drawPath(points){this.ctx.beginPath();this.ctx.moveTo(points[0].x,points[0].y);for(let i=1;i < points.length;i++){this.ctx.lineTo(points[i].x,points[i].y);}this.ctx.stroke();}drawSegmentedPath(points){const segmentLength=points.length / 3;this.ctx.strokeStyle='#002395';this.ctx.lineWidth=4;this.ctx.lineCap='round';this.ctx.lineJoin='round';this.drawPathSegment(points,0,segmentLength);this.ctx.strokeStyle='#FFFFFF';this.drawPathSegment(points,segmentLength,segmentLength * 2);this.ctx.strokeStyle='#ED2939';this.drawPathSegment(points,segmentLength * 2,points.length);}drawPathSegment(points,start,end){if(!points || !Array.isArray(points)|| points.length===0){console.log('No points to draw');return;}start=Math.max(0,Math.min(start,points.length - 1));end=Math.max(0,Math.min(end,points.length));if(start >=end){console.log('Invalid segment range');return;}this.ctx.beginPath();let firstValidPoint=null;for(let i=start;i < end;i++){if(points[i] && typeof points[i].x==='number' && typeof points[i].y==='number' && !isNaN(points[i].x)&& !isNaN(points[i].y)){firstValidPoint=points[i];break;}}if(!firstValidPoint){console.log('No valid points found in segment');this.ctx.moveTo(50,50);this.ctx.lineTo(100,100);this.ctx.stroke();return;}this.ctx.moveTo(firstValidPoint.x,firstValidPoint.y);for(let i=start + 1;i < end;i++){if(points[i] && typeof points[i].x==='number' && typeof points[i].y==='number' && !isNaN(points[i].x)&& !isNaN(points[i].y)){this.ctx.lineTo(points[i].x,points[i].y);}}this.ctx.stroke();}switchTab(tabName){document.querySelectorAll('.tab-btn').forEach(btn=>{btn.classList.remove('active');});document.querySelector(`[data-tab="${tabName}"]`).classList.add('active');document.querySelectorAll('.tab-panel').forEach(panel=>{panel.classList.remove('active');});document.getElementById(`${tabName}-tab`).classList.add('active');this.currentTab=tabName;}selectMetric(metric){const button=document.querySelector(`[data-metric="${metric}"]`);if(this.activeMetrics.has(metric)){this.activeMetrics.delete(metric);button.classList.remove('active');if(this.activeMetrics.size===0){this.activeMetrics.add('distance');document.querySelector(`[data-metric="distance"]`).classList.add('active');}}else{this.activeMetrics.add(metric);button.classList.add('active');}this.updateWorkoutDisplay();this.drawRoute();}setPosition(position){console.log('Setting position:',position);}setColor(color){console.log('Setting color:',color);if(color==='french'){this.drawRoute();}}setRatio(ratio){console.log('Setting ratio:',ratio);document.querySelectorAll('.ratio-btn').forEach(btn=>{btn.classList.remove('active');});document.querySelector(`[data-ratio="${ratio}"]`).classList.add('active');const previewArea=document.querySelector('.preview-area');const connectedState=document.getElementById('connected');if(previewArea && connectedState){previewArea.classList.remove('ratio-9-16','ratio-4-5');connectedState.classList.remove('ratio-9-16','ratio-4-5');switch(ratio){case '9:16': const screenHeight=window.innerHeight;const navBarHeight=60;const tabBarHeight=180;const safeAreaInsets=0;const viewportHeight9_16=screenHeight - navBarHeight - tabBarHeight - safeAreaInsets;const viewportWidth9_16=viewportHeight9_16 * 9 / 16;previewArea.classList.add('ratio-9-16');connectedState.classList.add('ratio-9-16');previewArea.style.setProperty('width',`${viewportWidth9_16}px`,'important');previewArea.style.setProperty('height',`${viewportHeight9_16}px`,'important');previewArea.style.setProperty('max-width',`${viewportWidth9_16}px`,'important');previewArea.style.setProperty('max-height',`${viewportHeight9_16}px`,'important');connectedState.style.setProperty('aspect-ratio','9 / 16','important');connectedState.style.setProperty('width','100%','important');connectedState.style.setProperty('height','100%','important');console.log('üîß –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ 9:16:',viewportWidth9_16,'x',viewportHeight9_16);break;case '4:5': const screenHeight4_5=window.innerHeight;const screenWidth4_5=window.innerWidth;const navBarHeight4_5=60;const tabBarHeight4_5=180;const safeAreaInsets4_5=0;const containerHeight4_5=screenHeight4_5 - navBarHeight4_5 - tabBarHeight4_5 - safeAreaInsets4_5;const canvasWidth4_5=screenWidth4_5;const canvasHeight4_5=screenWidth4_5 * 5 / 4;previewArea.classList.add('ratio-4-5');connectedState.classList.add('ratio-4-5');previewArea.style.setProperty('width','100%','important');previewArea.style.setProperty('height',`${containerHeight4_5}px`,'important');previewArea.style.setProperty('max-width','100%','important');previewArea.style.setProperty('max-height',`${containerHeight4_5}px`,'important');connectedState.style.setProperty('aspect-ratio','4 / 5','important');connectedState.style.setProperty('width','100%','important');connectedState.style.setProperty('height','100%','important');console.log('üîß –£—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ 4:5 - –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä:','100% x',containerHeight4_5,'canvas:',canvasWidth4_5,'x',canvasHeight4_5);break;}}console.log('üîß Ratio –∏–∑–º–µ–Ω–µ–Ω –Ω–∞:',ratio,'- –ø—Ä–µ–≤—å—é –æ–±–Ω–æ–≤–ª–µ–Ω');setTimeout(()=>{this.resizeCanvas();console.log('üîß Canvas –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∞–Ω –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏—è');},100);}handlePhotoUpload(file){if(!file)return;const reader=new FileReader();reader.onload=(e)=>{this.backgroundImage=e.target.result;this.originalBackgroundImage=e.target.result;this.isMonochrome=false;this.updateMonoButton();this.updateBackground();const monoBtn=document.getElementById('mono-toggle-btn');if(monoBtn){monoBtn.style.display='flex';monoBtn.style.alignItems='center';monoBtn.style.justifyContent='center';}};reader.readAsDataURL(file);}handleLogoUpload(file){if(!file)return;const reader=new FileReader();reader.onload=(e)=>{this.logoImage=e.target.result;this.updateLogo();};reader.readAsDataURL(file);}updateBackground(){const background=document.getElementById('connected');background.style.backgroundImage='none';if(this.backgroundImage){this.canvas.classList.add('has-background');}else{this.canvas.classList.remove('has-background');}this.resizeCanvas();if(this.currentWorkout){this.drawRoute();}console.log('üñºÔ∏è Background updated in canvas');}updateLogo(){console.log('Logo updated:',this.logoImage);}showNotConnectedState(){console.log('Showing not connected state');const loading=document.getElementById('loading');const notConnected=document.getElementById('not-connected');const connected=document.getElementById('connected');if(loading)loading.classList.add('hidden');if(notConnected)notConnected.classList.remove('hidden');if(connected)connected.classList.add('hidden');}showConnectedState(){console.log('Showing connected state');const loading=document.getElementById('loading');const notConnected=document.getElementById('not-connected');const connected=document.getElementById('connected');if(loading)loading.classList.add('hidden');if(notConnected)notConnected.classList.add('hidden');if(connected){connected.classList.remove('hidden');connected.style.setProperty('aspect-ratio','9 / 16','important');connected.style.setProperty('max-height','100%','important');connected.style.setProperty('overflow','hidden','important');connected.style.setProperty('box-sizing','border-box','important');connected.style.setProperty('width','100%','important');connected.style.setProperty('height','auto','important');console.log('üîß Connected state –ø–æ–∫–∞–∑–∞–Ω');setTimeout(()=>{this.resizeCanvas();console.log('üîß Canvas –ø–µ—Ä–µ—Ä–∏—Å–æ–≤–∞–Ω –ø—Ä–∏ –ø–æ–∫–∞–∑–µ connected state');},100);console.log('üîß Connected state —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –ø—Ä–æ–ø–æ—Ä—Ü–∏—è–º–∏ 9:16');}}showError(message){alert(message);}openWorkoutSelector(){const modal=document.getElementById('workout-selector-modal');if(modal){modal.classList.remove('hidden');this.populateWorkoutList();}}closeWorkoutSelector(){const modal=document.getElementById('workout-selector-modal');if(modal){modal.classList.add('hidden');}}populateWorkoutList(){const workoutList=document.getElementById('workout-list');if(!workoutList || !this.workouts.length){workoutList.innerHTML='<p style="text-align: center;opacity: 0.7;">No workouts available</p>';return;}workoutList.innerHTML=this.workouts.map((workout,index)=> ` <div class="workout-item ${workout.id===this.currentWorkout?.id ? 'active' : ''}" data-workout-id="${workout.id}"> <h4 class="workout-name">${workout.name || 'Unnamed Workout'}</h4> <div class="workout-stats"> <div class="workout-stat"> <span class="workout-stat-label">Distance</span> <span class="workout-stat-value">${this.formatDistance(workout.distance)}</span> </div> <div class="workout-stat"> <span class="workout-stat-label">Elevation</span> <span class="workout-stat-value">${this.formatElevation(workout.total_elevation_gain)}</span> </div> <div class="workout-stat"> <span class="workout-stat-label">Time</span> <span class="workout-stat-value">${this.formatTime(workout.moving_time)}</span> </div> </div> </div> `).join('');workoutList.querySelectorAll('.workout-item').forEach(item=>{item.addEventListener('click',()=>{const workoutId=parseInt(item.dataset.workoutId);this.selectWorkout(workoutId);});});}selectWorkout(workoutId){const workout=this.workouts.find(w=> w.id===workoutId);if(workout){this.currentWorkout=workout;this.updateWorkoutDisplay();this.drawRoute();this.closeWorkoutSelector();console.log('üèÉ Selected workout:',workout.name);}}formatTime(seconds){const hours=Math.floor(seconds / 3600);const minutes=Math.floor((seconds % 3600)/ 60);if(hours > 0){return `${hours}h ${minutes}m`;}else{return `${minutes}m`;}}shareData(){if(!this.currentWorkout){this.showError('No workout data to share');return;}const shareText=`Check out my workout: ${this.currentWorkout.name || 'Workout'}- ${this.formatDistance(this.currentWorkout.distance)}`;if(navigator.share){navigator.share({title: '5zn Workout',text: shareText,url: window.location.href}).then(()=>{console.log('üì§ Shared successfully');}).catch((error)=>{console.log('Error sharing:',error);this.fallbackShare(shareText);});}else{this.fallbackShare(shareText);}}fallbackShare(text){if(navigator.clipboard){navigator.clipboard.writeText(text).then(()=>{alert('Workout info copied to clipboard!');}).catch(()=>{alert(text);});}else{alert(text);}}exportData(){if(!this.currentWorkout){this.showError('No workout data to export');return;}const exportCanvas=document.createElement('canvas');exportCanvas.width=1080;exportCanvas.height=1920;const exportCtx=exportCanvas.getContext('2d');exportCtx.fillStyle='#000000';exportCtx.fillRect(0,0,1080,1920);const padding=40;const routeWidth=1080 -(padding * 2);const routeHeight=1920 -(padding * 2)- 200;const points=this.generateDemoRoute(routeWidth,routeHeight,0);const segmentLength=points.length / 3;exportCtx.strokeStyle='#002395';exportCtx.lineWidth=8;exportCtx.lineCap='round';exportCtx.lineJoin='round';this.drawExportPathSegment(exportCtx,points,0,segmentLength,padding);exportCtx.strokeStyle='#FFFFFF';this.drawExportPathSegment(exportCtx,points,segmentLength,segmentLength * 2,padding);exportCtx.strokeStyle='#ED2939';this.drawExportPathSegment(exportCtx,points,segmentLength * 2,points.length,padding);exportCtx.fillStyle='#FFFFFF';exportCtx.font='bold 48px -apple-system,BlinkMacSystemFont,"Segoe UI",Roboto,sans-serif';exportCtx.textAlign='left';exportCtx.fillText('DISTANCE',60,1800);exportCtx.fillText('3 000 m',60,1860);exportCtx.textAlign='right';exportCtx.fillText('ELEVATION',1020,1800);exportCtx.fillText('3 000 m',1020,1860);const link=document.createElement('a');link.download=`5zn-workout-${Date.now()}.png`;link.href=exportCanvas.toDataURL('image/png');link.click();console.log('üì∏ Exported workout image: 1080x1920(–æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–π —Ä–∞–∑–º–µ—Ä)');}drawExportPathSegment(ctx,points,start,end,offsetX){if(!points || !Array.isArray(points)|| points.length===0)return;start=Math.max(0,Math.min(start,points.length - 1));end=Math.max(0,Math.min(end,points.length));if(start >=end)return;ctx.beginPath();let firstValidPoint=null;for(let i=start;i < end;i++){if(points[i] && typeof points[i].x==='number' && typeof points[i].y==='number' && !isNaN(points[i].x)&& !isNaN(points[i].y)){firstValidPoint=points[i];break;}}if(!firstValidPoint)return;ctx.moveTo(firstValidPoint.x + offsetX,firstValidPoint.y + 100);for(let i=start + 1;i < end;i++){if(points[i] && typeof points[i].x==='number' && typeof points[i].y==='number' && !isNaN(points[i].x)&& !isNaN(points[i].y)){ctx.lineTo(points[i].x + offsetX,points[i].y + 100);}}ctx.stroke();}}document.addEventListener('DOMContentLoaded',()=>{console.log('DOM loaded,initializing TrinkyApp');new TrinkyApp();});if(!localStorage.getItem('strava_token')){console.log('No token found,forcing not connected state');setTimeout(()=>{const loading=document.getElementById('loading');const notConnected=document.getElementById('not-connected');if(loading)loading.classList.add('hidden');if(notConnected)notConnected.classList.remove('hidden');},100);}if(window.location.pathname.includes('/oauth/')){const urlParams=new URLSearchParams(window.location.search);const code=urlParams.get('code');if(code){console.log('OAuth code received:',code);localStorage.setItem('strava_token','mock_token');window.location.href='/';}}